<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' []>
<rfc ipr="trust200902" category="std" docName="draft-ietf-uta-mta-sts-04">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc private=""?>
<?rfc topblock="yes"?>
<?rfc comments="no"?>
<front>
<title abbrev="MTA-STS">SMTP MTA Strict Transport Security (MTA-STS)</title>

<author initials="D." surname="Margolis" fullname="Daniel Margolis">
<organization>Google, Inc</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>dmargolis (at) google.com</email>
<uri></uri>
</address>
</author>
<author initials="M." surname="Risher" fullname="Mark Risher">
<organization>Google, Inc</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>risher (at) google (dot com)</email>
<uri></uri>
</address>
</author>
<author initials="B." surname="Ramakrishnan" fullname="Binu Ramakrishnan">
<organization>Yahoo!, Inc</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>rbinu (at) yahoo-inc (dot com)</email>
<uri></uri>
</address>
</author>
<author initials="A." surname="Brotman" fullname="Alexander Brotman">
<organization>Comcast, Inc</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>alex_brotman (at) comcast.com</email>
<uri></uri>
</address>
</author>
<author initials="J." surname="Jones" fullname="Janet Jones">
<organization>Microsoft, Inc</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>janet.jones (at) microsoft (dot com)</email>
<uri></uri>
</address>
</author>
<date year="2017" month="March" day="27"/>

<area>Applications</area>
<workgroup>Using TLS in Applications</workgroup>
<keyword></keyword>


<abstract>
<t>SMTP Mail Transfer Agent Strict Transport Security (MTA-STS) is a mechanism
enabling mail service providers to declare their ability to receive Transport
Layer Security (TLS) secure SMTP connections, and to specify whether sending
SMTP servers should refuse to deliver to MX hosts that do not offer TLS with a
trusted server certificate.
</t>
</abstract>


</front>

<middle>

<section anchor="introduction" title="Introduction">
<t>The STARTTLS extension to SMTP <xref target="RFC3207"/> allows SMTP clients and hosts to
negotiate the use of a TLS channel for encrypted mail transmission.
</t>
<t>While this <spanx style="emph">opportunistic</spanx> encryption protocol by itself provides a high barrier
against passive man-in-the-middle traffic interception, any attacker who can
delete parts of the SMTP session (such as the &quot;250 STARTTLS&quot; response) or who
can redirect the entire SMTP session (perhaps by overwriting the resolved MX
record of the delivery domain) can perform downgrade or interception attacks.
</t>
<t>This document defines a mechanism for recipient domains to publish policies
specifying:
</t>
<t>
<list style="symbols">
<t>whether MTAs sending mail to this domain can expect PKIX authenticated TLS
 support</t>
<t>what a conforming client should do with messages when TLS cannot be
 successfully negotiated</t>
</list>
</t>

<section anchor="terminology" title="Terminology">
<t>The keywords &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;,
&quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot;, when they appear in this
document, are to be interpreted as described in <xref target="RFC2119"/>.
</t>
<t>We also define the following terms for further use in this document:
</t>
<t>
<list style="symbols">
<t>MTA-STS Policy: A commitment by the Policy Domain to support PKIX authenticated
TLS for the specified MX hosts.</t>
<t>Policy Domain: The domain for which an MTA-STS Policy is defined. This is the
next-hop domain; when sending mail to &quot;alice@example.com&quot; this would ordinarly
be &quot;example.com&quot;, but this may be overriden by explicit routing rules (as
described in &quot;Policy Selection for Smart Hosts&quot;).</t>
</list>
</t>
</section>
</section>

<section anchor="related-technologies" title="Related Technologies">
<t>The DANE TLSA record <xref target="RFC7672"/> is similar, in that DANE is also designed to
upgrade unauthenticated encryption or plaintext transmission into authenticated,
downgrade-resistent encrypted tarnsmission. DANE requires DNSSEC <xref target="RFC4033"/> for
authentication; the mechanism described here instead relies on certificate
authorities (CAs) and does not require DNSSEC, at a cost of risking malicious
downgrades.  For a thorough discussion of this trade-off, see the section
&quot;Security Considerations&quot;.
</t>
<t>In addition, MTA-STS provides an optional report-only mode, enabling soft
deployments to detect policy failures; partial deployments can be achieved in
DANE by deploying TLSA records only for some of a domain's MXs, but such a
mechanism is not possible for the per-domain policies used by MTA-STS.
</t>
<t>The primary motivation of MTA-STS is to provide a mechanism for domains to
upgrade their transport security even when deploying DNSSEC is undesirable or
impractical. However, MTA-STS is designed not to interfere with DANE deployments
when the two overlap; in particular, senders who implement MTA-STS validation
MUST NOT allow a &quot;valid&quot; or &quot;report-only&quot; MTA-STS validation to override a
failing DANE validation.
</t>
</section>

<section anchor="policy-discovery" title="Policy Discovery">
<t>MTA-STS policies are distributed via HTTPS from a &quot;well-known&quot; <xref target="RFC5785"/> path served
within the Policy Domain, and their presence and current version are indicated
by a TXT record at the Policy Domain. These TXT records additionally contain a
policy <spanx style="verb">id</spanx> field, allowing sending MTAs to check the currency of a cached
policy without performing an HTTPS request.
</t>
<t>To discover if a recipient domain implements MTA-STS, a sender need only resolve
a single TXT record. To see if an updated policy is available for a domain for
which the sender has a previously cached policy, the sender need only check the
TXT record's version <spanx style="verb">id</spanx> against the cached value.
</t>

<section anchor="mtasts-txt-records" title="MTA-STS TXT Records">
<t>The MTA-STS TXT record is a TXT record with the name <spanx style="verb">_mta-sts</spanx> at the Policy
Domain. For the domain <spanx style="verb">example.com</spanx>, this record would be
<spanx style="verb">_mta-sts.example.com</spanx>.  MTA-STS TXT records MUST be US-ASCII,
semicolon-separated key/value pairs containing the following fields:
</t>
<t>
<list style="symbols">
<t><spanx style="verb">v</spanx>: (plain-text, required). Currently only &quot;STSv1&quot; is supported.</t>
<t><spanx style="verb">id</spanx>: (plain-text, required). A short string used to track policy updates.
This string MUST uniquely identify a given instance of a policy, such that
senders can determine when the policy has been updated by comparing to the <spanx style="verb">id</spanx>
of a previously seen policy. There is no implied ordering of <spanx style="verb">id</spanx> fields
between revisions.</t>
</list>
</t>
<t>An example TXT record is as below:
</t>
<t><spanx style="verb">_mta-sts.example.com.  IN TXT "v=STSv1; id=20160831085700Z;"</spanx>
</t>
<t>The formal definition of the <spanx style="verb">_mta-sts</spanx> TXT record, defined using <xref target="RFC5234"/>,
is as follows:
</t>

<figure align="center"><artwork align="center">
sts-text-record = sts-version *WSP %x3B *WSP sts-id [%x3B]

sts-version     = "v" *WSP "=" *WSP %x53 %x54        ; "STSv1" 
                  %x53 %x76 %x31

sts-id          = "id" *WSP "=" *WSP 1*32(ALPHA / DIGIT) 
</artwork></figure>
<t>If multiple TXT records for <spanx style="verb">_mta-sts</spanx> are returned by the resolver, records
which do not begin with <spanx style="verb">v=STSv1;</spanx> are discarded. If the number of resulting
records is not one, senders MUST assume the recipient domain does not implement
MTA-STS and skip the remaining steps of policy discovery.
</t>
</section>

<section anchor="mtasts-policies" title="MTA-STS Policies">
<t>The policy itself is a JSON <xref target="RFC4627"/> object served via the HTTPS GET method from
the fixed <xref target="RFC5785"/> &quot;well-known&quot; path of <spanx style="verb">.well-known/mta-sts.json</spanx> served by
the <spanx style="verb">mta-sts</spanx> host at the Policy Domain. Thus for <spanx style="verb">example.com</spanx> the path is
<spanx style="verb">https://mta-sts.example.com/.well-known/mta-sts.json</spanx>.
</t>
<t>This JSON object contains the following key/value pairs:
</t>
<t>
<list style="symbols">
<t><spanx style="verb">version</spanx>: (plain-text, required). Currently only &quot;STSv1&quot; is supported.</t>
<t><spanx style="verb">mode</spanx>: (plain-text, required). Either &quot;enforce&quot; or &quot;report&quot;, indicating the
expected behavior of a sending MTA in the case of a policy validation failure.</t>
<t><spanx style="verb">max_age</spanx>: Max lifetime of the policy (plain-text non-negative integer
seconds, required).  Well-behaved clients SHOULD cache a policy for up to this value
from last policy fetch time. To mitigate the risks of attacks at policy
refresh time, it is expected that this value typically be in the range of
weeks or greater.</t>
<t><spanx style="verb">mx</spanx>: MX patterns (list of plain-text MX match strings, required). One or more
patterns matching the expected MX for this domain. For example,
<spanx style="verb">["*.example.com", "*.example.net"]</spanx> indicates that mail for this domain might
be handled by any MX with a hostname at <spanx style="verb">example.com</spanx> or <spanx style="verb">example.net</spanx>. Valid
patterns can be either hostname literals (e.g. &quot;mx1.example.com&quot;) or wildcard
matches, so long as the wildcard occupies the full left-most label in the
pattern. (Thus <spanx style="verb">*.example.com</spanx> is valid but <spanx style="verb">mx*.example.com</spanx> is not.) In the
case of Internationalized Domain Names (<xref target="RFC5891"/>), the MX MUST specify the
Punycode-encoded A-label, as per <xref target="RFC3492"/>, and not the Unicode-encoded
U-label.</t>
</list>
</t>
<t>An example JSON policy is as below:
</t>

<figure align="center"><artwork align="center">
{
  "version": "STSv1",
  "mode": "enforce",
  "mx": ["*.mail.example.com"],
  "max_age": 123456
}
</artwork></figure>
<t>Parsers SHOULD accept TXT records and policy files which are syntactically valid
(i.e. valid key-value pairs separated by semi-colons for TXT records and valid
JSON for policy files) and implementing a superset of this specification, in
which case unknown fields SHALL be ignored.
</t>
</section>

<section anchor="https-policy-fetching" title="HTTPS Policy Fetching">
<t>When fetching a new policy or updating a policy, the HTTPS endpoint MUST present
a TLS certificate which is valid for the <spanx style="verb">mta-sts</spanx> host (as described in
<xref target="RFC6125"/>), chain to a root CA that is trusted by the sending MTA, and be
non-expired. It is expected that sending MTAs use a set of trusted CAs similar
to those in widely deployed Web browsers and operating systems.
</t>
<t>HTTP 3xx redirects MUST NOT be followed.
</t>
<t>Senders may wish to rate-limit the frequency of attempts to fetch the HTTPS
endpoint even if a valid TXT record for the recipient domain exists. In the case
that the HTTPS GET fails, we suggest implementions may limit further attempts to
a period of five minutes or longer per version ID, to avoid overwhelming
resource-constrained recipients with cascading failures.
</t>
<t>Senders MAY impose a timeout on the HTTPS GET to avoid long delays imposed by
attempted policy updates. A suggested timeout is one minute; policy hosts SHOULD
respond to requests with a complete policy body within that timeout.
</t>
<t>If a valid TXT record is found but no policy can be fetched via HTTPS, and there
is no valid (non-expired) previously-cached policy, senders MUST treat the
recipient domain as one that has not implemented MTA-STS.
</t>
</section>

<section anchor="policy-selection-for-smart-hosts" title="Policy Selection for Smart Hosts">
<t>When sending mail via a &quot;smart host&quot;--an intermediate SMTP relay rather than the
message recipient's server--compliant senders MUST treat the smart host domain
as the policy domain for the purposes of policy discovery and application.
</t>
</section>
</section>

<section anchor="mx-host-validation" title="MX Host Validation">
<t>When sending to an MX at a domain for which the sender has a valid and
non-expired MTA-STS policy, a sending MTA honoring MTA-STS MUST ensure:
</t>
<t>
<list style="numbers">
<t>That the recipient MX matches the <spanx style="verb">mx</spanx> pattern from the recipient domain's
policy (as defined in the section &quot;MX Matching&quot;).</t>
<t>That the recipient MX supports STARTTLS and offers a valid PKIX based TLS
certificate (as defined in the section &quot;MX Certificate Validation&quot;).</t>
</list>
</t>
<t>Of note, not all validation failures affect mail delivery; the behavior of
sending MTAs when a host does not validate is described in the section &quot;Policy
Application&quot;.
</t>

<section anchor="mx-matching" title="MX Matching">
<t>When delivering mail for the Policy Domain to a recipient MX host, the sender
matches the MX hostname against the <spanx style="verb">mx</spanx> pattern from the applied STS policy,
ensuring that only matching MX hosts are used in delivery attempts.
</t>
<t>MX patterns may contain a wildcard character <spanx style="verb">*</spanx> which matches any single domain
name component or component fragment, though only as the leftmost component in a
pattern. For example, <spanx style="verb">*.example.com</spanx> is a valid pattern, but
<spanx style="verb">foo.*.example.com</spanx> is not. Given the pattern <spanx style="verb">*.example.com</spanx>, <spanx style="verb">mx1.example.com</spanx>
is a valid MX host, but <spanx style="verb">1234.dhcp.example.com</spanx> is not.
</t>
</section>

<section anchor="mx-certificate-validation" title="MX Certificate Validation">
<t>The certificate presented by the receiving MX MUST be valid for the MX hostname
and chain to a root CA that is trusted by the sending MTA. The certificate MUST
have a CN or SAN matching the MX hostname (as described in <xref target="RFC6125"/>) and be
non-expired.
</t>
<t>In the case of an &quot;implicit&quot; MX record (as specified in <xref target="RFC2821"/>) where no MX
RR exists for the recipient domain but there is an A RR, the MX hostname is
assumed to be that of the A RR and should be validated as such.
</t>
</section>
</section>

<section anchor="policy-application" title="Policy Application">
<t>When sending to an MX at a domain for which the sender has a valid, non-expired
MTA-STS policy, a sending MTA honoring MTA-STS applies the result of a policy
validation one of two ways, depending on the value of the policy <spanx style="verb">mode</spanx> field:
</t>
<t>
<list style="numbers">
<t><spanx style="verb">report</spanx>: In this mode, sending MTAs merely send a report (as described in
the TLSRPT specification (TODO: add ref)) indicating policy application
failures.</t>
<t><spanx style="verb">enforce</spanx>: In this mode, sending MTAs MUST NOT deliver the message to hosts
which fail MX matching or certificate validation.</t>
</list>
</t>
<t>When a message fails to deliver due to an <spanx style="verb">enforce</spanx> policy, a compliant MTA MUST
NOT permanently fail to deliver messages before checking for the presence of an
updated policy at the Policy Domain. (In all cases, MTAs SHOULD treat such
failures as transient errors and retry delivery later.) This allows implementing
domains to update long-lived policies on the fly.
</t>
<t>Finally, in both <spanx style="verb">enforce</spanx> and <spanx style="verb">report</spanx> modes, failures to deliver in compliance
with the applied policy result in failure reports to the policy domain, as
described in the TLSRPT specification (TODO: add ref).
</t>

<section anchor="mx-preference" title="MX Preference">
<t>When applying a policy, sending MTAs SHOULD select recipient MXs by first
eliminating any MXs at lower priority than the current host (if in the MX
candidate set), then eliminating any non-matching (as specified by the MTA-STS
Policy) MX hosts from the candidate MX set, and then attempting delivery to
matching hosts as indicated by their MX priority, until delivery succeeds or the
MX candidate set is empty.
</t>
</section>

<section anchor="policy-application-control-flow" title="Policy Application Control Flow">
<t>An example control flow for a compliant sender consists of the following steps:
</t>
<t>
<list style="numbers">
<t>Check for a cached policy whose time-since-fetch has not exceeded its
<spanx style="verb">max_age</spanx>. If none exists, attempt to fetch a new policy. (Optionally,
sending MTAs may unconditionally check for a new policy at this step.)</t>
<t>If no policy is present, proceed with non-STS delivery.</t>
<t>Filter candidate MXs against the current policy.</t>
<t>If no candidate MXs are valid and the policy mode is <spanx style="verb">enforce</spanx>, temporarily
fail the message.  (If the mode is <spanx style="verb">report</spanx>, generate a failure report but
deliver as though MTA-STS were not implemented.)</t>
<t>For each candidate MX, in order of MX priority, attempt to deliver the
message, enforcing STARTTLS and the MX host's PKIX certificate validation.</t>
</list>
</t>
</section>
</section>

<section anchor="operational-considerations" title="Operational Considerations">

<section anchor="policy-updates" title="Policy Updates">
<t>Updating the policy requires that the owner make changes in two places: the
<spanx style="verb">_mta-sts</spanx> TXT record in the Policy Domain's DNS zone and at the corresponding
HTTPS endpoint. As a result, recipients should thus expect a policy will
continue to be used by senders until both the HTTPS and TXT endpoints are
updated and the TXT record's TTL has passed.
</t>
<t>In other words, a sender who is unable to successfully deliver a message while
applying a cache of the recipient's now-outdated policy may be unable to
discover that a new policy exists until the DNS TTL has passed.  Recipients
should therefore ensure that old policies continue to work for message delivery
during this period of time, or risk message delays.
</t>
</section>
</section>

<section anchor="iana-considerations" title="IANA Considerations">
<t>A new .well-known URI will be registered in the Well-Known URIs registry as
described below:
</t>
<t>URI Suffix: mta-sts.json
Change Controller: IETF
</t>
</section>

<section anchor="security-considerations" title="Security Considerations">
<t>SMTP MTA Strict Transport Security attempts to protect against an active
attacker who wishes to intercept or tamper with mail between hosts who support
STARTTLS. There are two classes of attacks considered:
</t>
<t>
<list style="numbers">
<t>Foiling TLS negotiation, for example by deleting the &quot;250 STARTTLS&quot; response
from a server or altering TLS session negotiation. This would result in the
SMTP session occurring over plaintext, despite both parties supporting TLS.</t>
<t>Impersonating the destination mail server, whereby the sender might deliver
the message to an impostor, who could then monitor and/or modify messages
despite opportunistic TLS. This impersonation could be accomplished by
spoofing the DNS MX record for the recipient domain, or by redirecting client
connections intended for the legitimate recipient server (for example, by
altering BGP routing tables).</t>
</list>
</t>
<t>MTA-STS can thwart such attacks only if the sender is able to previously obtain
and cache a policy for the recipient domain, and only if the attacker is unable
to obtain a valid certificate that complies with that policy. Below, we consider
specific attacks on this model.
</t>

<section anchor="obtaining-a-signed-certificate" title="Obtaining a Signed Certificate">
<t>SMTP MTA-STS relies on certificate validation via PKIX based TLS identity
checking <xref target="RFC6125"/>. Attackers who are able to obtain a valid certificate for
the targeted recipient mail service (e.g. by compromising a certificate
authority) are thus able to circumvent STS authentication.
</t>
</section>

<section anchor="preventing-policy-discovery" title="Preventing Policy Discovery">
<t>Since MTA-STS uses DNS TXT records for policy discovery, an attacker who is able
to block DNS responses can suppress the discovery of an MTA-STS Policy, making
the Policy Domain appear not to have an MTA-STS Policy. The sender policy cache
is designed to resist this attack by decreasing the frequency of policy
discovery and thus reducing the window of vulnerability; it is nonetheless a
risk that attackers who can predict or induce policy discovery--for example, by
inducing a victim sending domain to send mail to a never-before-contacted
recipient while carrying out a man-in-the-middle attack--may be able to foil
policy discovery and effectively downgrade the security of the message delivery.
</t>
<t>Since this attack depends upon intercepting initial policy discovery, we
strongly recommend implementors to prefer policy <spanx style="verb">max_age</spanx> values to be as long
as is practical.
</t>
<t>Resistence to downgrade attacks of this nature--due to the ability to
authoritatively determine &quot;lack of a record&quot; even for non-participating
recipients--is a feature of DANE, due to its leverage of DNSSEC for policy
discovery.
</t>
</section>

<section anchor="denial-of-service" title="Denial of Service">
<t>We additionally consider the Denial of Service risk posed by an attacker who can
modify the DNS records for a victim domain. Absent MTA-STS, such an attacker can
cause a sending MTA to cache invalid MX records, but only for however long the
sending resolver caches those records. With MTA- STS, the attacker can
additionally advertise a new, long-<spanx style="verb">max_age</spanx> MTA-STS policy with <spanx style="verb">mx</spanx>
constraints that validate the malicious MX record, causing senders to cache the
policy and refuse to deliver messages once the victim has resecured the MX
records.
</t>
<t>This attack is mitigated in part by the ability of a victim domain to (at any
time) publish a new policy updating the cached, malicious policy, though this
does require the victim domain to both obtain a valid CA-signed certificate and
to understand and properly configure MTA-STS.
</t>
<t>Similarly, we consider the possibility of domains that deliberately allow
untrusted users to serve untrusted content on user-specified subdomains. In some
cases (e.g. the service Tumblr.com) this takes the form of providing HTTPS
hosting of user-registered subdomains; in other cases (e.g. dynamic DNS
providers) this takes the form of allowing untrusted users to register custom
DNS records at the provider's domain.
</t>
<t>In these cases, there is a risk that untrusted users would be able to serve
custom content at the <spanx style="verb">mta-sts</spanx> host, including serving an illegitimate MTA-STS
policy.  We believe this attack is rendered more difficult by the need for the
attacker to both inject malicious (but temporarily working) MX records and also
serve the <spanx style="verb">_mta-sts</spanx> TXT record on the same domain--something not, to our
knowledge, widely provided to untrusted users. This attack is additionally
mitigated by the aforementioned ability for a victim domain to update an invalid
policy at any future date.
</t>
</section>

<section anchor="weak-policy-constraints" title="Weak Policy Constraints">
<t>Even if an attacker cannot modify a served policy, the potential exists for
configurations that allow attackers on the same domain to receive mail for that
domain. For example, an easy configuration option when authoring an MTA-STS Policy
for <spanx style="verb">example.com</spanx> is to set the <spanx style="verb">mx</spanx> equal to <spanx style="verb">*.example.com</spanx>; recipient domains
must consider in this case the risk that any user possessing a valid hostname
and CA-signed certificate (for example, <spanx style="verb">dhcp-123.example.com</spanx>) will, from the
perspective of MTA-STS Policy validation, be a valid MX host for that domain.
</t>
</section>
</section>

<section anchor="contributors" title="Contributors">
<t>Nicolas Lidzborski
Google, Inc
nlidz (at) google (dot com)
</t>
<t>Wei Chuang
Google, Inc
weihaw (at) google (dot com)
</t>
<t>Brandon Long
Google, Inc
blong (at) google (dot com)
</t>
<t>Franck Martin
LinkedIn, Inc
fmartin (at) linkedin (dot com)
</t>
<t>Klaus Umbach
1&amp;1 Mail &amp; Media Development &amp; Technology GmbH
klaus.umbach (at) 1und1 (dot de)
</t>
<t>Markus Laber
1&amp;1 Mail &amp; Media Development &amp; Technology GmbH
markus.laber (at) 1und1 (dot de)
</t>
</section>

<section anchor="appendix-1-domain-owner-mtasts-example-record" title="Appendix 1: Domain Owner MTA-STS example record">

<section anchor="example-1" title="Example 1">
<t>The owner of <spanx style="verb">example.com</spanx> wishes to begin using MTA-STS with a policy that will
solicit reports from receivers without affecting how the messages are
processed, in order to verify the identity of MXs that handle mail for
<spanx style="verb">example.com</spanx>, confirm that TLS is correctly used, and ensure that certificates
presented by the recipient MX validate.
</t>
<t>MTA-STS policy indicator TXT RR:
</t>

<figure align="center"><artwork align="center">
_mta-sts.example.com.  IN TXT "v=STSv1; id=20160831085700Z;"
</artwork></figure>
<t>MTA-STS Policy JSON served as the response body at
<eref target="https://mta-sts.example.com/.well-known/mta-sts.json:"/>
</t>

<figure align="center"><artwork align="center">
{
  "version": "STSv1",
  "mode": "report",
  "mx": ["mx1.example.com", "mx2.example.com"],
  "max_age": 12345678
}

</artwork></figure>
</section>
</section>

<section anchor="appendix-2-message-delivery-pseudocode" title="Appendix 2: Message delivery pseudocode">
<t>Below is pseudocode demonstrating the logic of a compliant sending MTA. This
implements the &quot;two-pass&quot; approach, first attempting delivery with a newly
fetched policy (if present) before falling back to a cached policy (if present).
</t>
<t>While this pseudocode implementation suggests synchronous policy retrieval in
the delivery path, in a working implementation that may be undesirable, and we
expect some implementors to instead prefer a background fetch that does not
block delivery if no cached policy is present.
</t>

<figure align="center"><artwork align="center">

func isEnforce(policy) {
  // Return true if the policy mode is "enforce".
}

func isNonExpired(policy) {
  // Return true if the policy is not expired.
}

func tryStartTls(mx) {
  // Attempt to open an SMTP connection with STARTTLS with the MX.
}

func certMatches(connection, mx) {
  // Return if the server certificate from "connection" matches the "mx" host.
  // See "MX Certificate Validation".
}

func tryDeliverMail(connection, message) {
  // Attempt to deliver "message" via "connection".
}

func getMxsForPolicy(domain, policy) {
  // Sort the MXs by priority, filtering out those which are invalid according
  // to "policy".
}

func tryGetNewPolicy(domain) {
  // Check for an MTA-STS TXT record for "domain" in DNS, and return the
  // indicated policy.
}

func cachePolicy(domain, policy) {
  // Store "policy" as the cached policy for "domain".
}

func tryGetCachedPolicy(domain, policy) {
  // Return a cached policy for "domain".
}

func reportError(error) {
  // Report an error via TLSRPT.
}

func tryMxAccordingTo(message, mx, policy) {
  connection := connect(mx)
  if !connection {
    return false  // Can't connect to the MX so it's not an MTA-STS error.
  }
  secure := true
  if !tryStartTls(mx, &amp;connection) {
    secure = false
    reportError(E_NO_VALID_TLS)
  } else if certMatches(connection, mx) {
    secure = false
    reportError(E_CERT_MISMATCH)
  }
  if secure || !isEnforce(policy) {
    return tryDeliverMail(connection, message)
  }
  return false
}

func tryWithPolicy(message, domain, policy) {
  mxes := getMxesForPolicy(domain, policy)
  if mxs is empty {
    reportError(E_NO_VALID_MXES)
  }
  for mx in mxes {
    if tryMxAccordingTo(message, mx, policy) {
      return true
    }
  }
  return false
}

func handleMessage(message) {
  domain := ... // domain part after '@' from recipient
  oldPolicy := tryGetCachedPolicy(domain)
  newPolicy := tryGetNewPolicy(domain)
  if newPolicy {
    cachePolicy(domain, newPolicy)
    oldPolicy = newPolicy
  }
  if oldPolicy {
    return tryWithPolicy(message, oldPolicy)
  }
  // There is no policy or there's a new policy that did not work.
  // Try to deliver the message normally (i.e. without MTA-STS).
}

</artwork></figure>
</section>

</middle>
<back>
<references title="Normative References">
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2821.xml"?>
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3207.xml"?>
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3492.xml"?>
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml"?>
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml"?>
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"?>
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5785.xml"?>
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5891.xml"?>
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml"?>
<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7672.xml"?>
</references>

</back>
</rfc>
